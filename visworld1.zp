/******************************************************************************\
FILE:           visworld1.zp
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
MODIFIED BY:    --

EXPERIMENT:     Single Image Visual World

DESCRIPTION:


Purpose of this experiment is to record participant's eye-movements
while he/she is listening to a spoken utterance and looking at a 
screen displaying a semi-realistic scene. For each trial a scene 
is displayed and an utterance relating to the scene is played. 
Participant's task is to carefully look and listen. Self-paced. 
Output: Eye-Tracking data as collected by the eye-tracker.


Global structure of experiment:

  - welcome

  - instructions

  - eye-tracker calibration

  - practice phase (... trials)
      trial
        subtrial 1 (eye-tracker recalibration, only done on drift-check fail)
        subtrial 2 (stimulus presentation)

  - pause

  - eye-tracker calibration

  - test phase (... trials)
      trial
        subtrial 1 (eye-tracker recalibration, only done on drift-check fail)
        subtrial 2 (stimulus presentation)

  - thankyou


HISTORY:
2012-09-21 TV   Created.
2015-03-30 CvR  Cleaned and adapted to 1.10
 
\******************************************************************************/

requires 2.5;

//standards:
import std_windows1;
import std_entry_page1;
import std_exit_page1;
import std_blank_page;
import std_sound_output_device;
import std_texts_en;
import std_pause_page;

// Import the exeperimental test procedure.
import test::task;

// Just for the sake of keeping std_control.zm happy.
int EXPERIMENT_VERSION = 1;

Experiment experiment
{
    on_event:entry()
    {   
        show_test_windows();
    }

    on_event:message()
    {
        // On Ctrl+F4 unconditionally jump to thankyou phase.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }

    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms, 500ms);
        }
    }

    Part phase1
    {
        on_event:entry()
        {
            test::action(this);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms, 500ms);
        }
    }

    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
        }
    }
}
