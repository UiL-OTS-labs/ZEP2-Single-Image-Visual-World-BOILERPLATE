
import shuffle;
import stimuli;
import output;
import instructions;
import et_setup_page;

// Choose one of the two eyetracker modules, reading usually happens with adults,
// hence the non infant version is chosen.
import eyetracker;
// import eyetracker_infant;/
import test_page;


// This task runst the experiment for a user.
Block task
{

    on_event:entry()
    {
        // Randomize test items table. comment these two lines out
        // to prevent randomization of the test items.
        if (shuffle_test_items(selected_group) != OK)
            terminate;

        // prepare eyetracker
        eyetracker.setup();
    }

    on_event:exit()
    {
        // We're closing. Retrieve eye-movement data file recorded.
        eyetracker.retrieve_data_files();
        eyetracker.cleanup();
    }

    Part instructions
    {
        on_event:entry()
        {
            pause_page.set_text(INSTRUCTION_TEXT, true);
            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }


    Part calibration1
    {
        on_event:entry()
        {
            et_setup_page.action(this);
        }
    }


    Block practice
    {
        on_event:entry()
        {
            open_data_file(0);

            num_cycles = test_prac_items.size;

            // Display progress bar
            //test_page.setup(num_cycles);
            // hide progress bar
            test_page.setup(-1);
        }

        on_event:exit()
        {
            test_page.cleanup();

            eyetracker.abort();

            eyetracker.stop_stream();

            eyetracker.close_data_file();
        }

        Trial trial
        {
            TestItem        current_item; 

            on_event:entry()
            {
                current_item = test_prac_items[practice.cycle];

                eyetracker.print_to_data_file(
                    "trialbeg " +  string(test.cycle + 1) + " " +
                    format(current_item.id,3) + " " +
                    string(current_item.type)
                    );
                eyetracker.print_to_data_file(
                    "plafile " + string(current_item.type) +
                    format(current_item.id,3) + ".bmp"
                    );
                eyetracker.print_to_data_file("wavfile " + current_item.sound_filename); 

                eyetracker.set_tracker_status_message("Practice trial " +  string(practice.cycle+1));
            }

            on_event:exit()
            {
                // Add end of trial message.
                eyetracker.print_to_data_file(
                    "trialend " + string(test.cycle + 1) + " " +
                    format(current_item.id,3) + " " +
                    string(current_item.type)
                    );

                eyetracker.set_tracker_status_message("");
            }

            TransientPart
            {
                on_event:entry()
                {
                    presentation.enter();       // Skip calibration part.
                }
            }

            Part recalibration
            {
                on_event:entry()
                {
                    et_setup_page.action(this);
                }
            }

            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.action(this, current_item, reference_time, practice.cycle);
                }
            }

            TransientPart recalibrate_check
            {
                on_event:entry()
                {
                    if (test_page.response.recalibrate)
                        recalibration.enter(); 
                }
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Part practice_pause
    {
        on_event:entry()
        {
            pause_page.set_text(PRACTICE_PAUSE_TEXT, true);
            pause_page.action(this);
            control.enable_all_buttons(CONTINUE);
        }
    }

    Part calibration2
    {
        on_event:entry()
        {
            et_setup_page.action(this);
        }
    }

    Block test
    {
        on_event:entry()
        {	
            open_data_file(1);

            num_cycles = test_items[selected_group].size;

            // Display progress bar
            //test_page.setup(num_cycles);
            // hide progress bar
            test_page.setup(-1);
        }

        on_event:exit()
        {
            test_page.cleanup();

            eyetracker.abort();
            eyetracker.close_data_file();
        }


        Trial trial
        {
            TestItem    current_item; 
            TestOutput  current_output;

            on_event:entry()
            {
                current_item = test_items[selected_group][test.cycle];

                // Add begin of trial message to eye-tracker data file for
                // analysis with the Fixation tool (Cozijn 1994).
                eyetracker.print_to_data_file(
                    "trialbeg " +  string(test.cycle + 1) + " " +
                    format(current_item.id,3) + " " +
                    string(current_item.type)
                    );
                eyetracker.print_to_data_file(
                    "plafile " + string(current_item.type) +
                    format(current_item.id,3) + ".bmp"
                    );
                eyetracker.print_to_data_file("wavfile " + current_item.sound_filename); 

                eyetracker.set_tracker_status_message("Test trial " + string(test.cycle+1));
            }
            
            on_event:exit()
            {
                current_output.trialnum = test.cycle + 1;
                current_output.id = current_item.id;
                current_output.type = current_item.type;
                current_output.image_filename = current_item.image_filename;
                current_output.sound_filename = current_item.sound_filename;
                current_output.recorded_eye_movements = current_item.record_eye_movements;
                current_output.did_drift_check = current_item.do_drift_check;

                //test specific output:
                current_output.expected_response = current_item.expected_answer;
                current_output.value = test_page.response.value;
                current_output.correct = test_page.response.correct;
                current_output.rt = test_page.response.rt;

                test_output_append(current_output);

                // Add end of trial message.
                eyetracker.print_to_data_file(
                    "trialend " + string(test.cycle + 1) + " " +
                    format(current_item.id,3) + " " +
                    string(current_item.type)
                    );

                eyetracker.set_tracker_status_message("");
            }

            TransientPart
            {
                on_event:entry()
                {
                    presentation.enter();       // Skip calibration part.
                }
            }


            Part recalibration
            {
                on_event:entry()
                {
                    et_setup_page.action(this);
                }
            }


            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.action(this, current_item, reference_time, test.cycle);
                }
            }

            TransientPart recalibrate_check
            {
                on_event:entry()
                {
                    if (test_page.response.recalibrate)
                        recalibration.enter(); 
                }
            }
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms, 500ms);
        }
    }

    void open_data_file(int recordingnum)
    {
        int listnum = selected_group + 1;
        string edfname = 
            format(expdb.session.id, 4) + "_" + 
            format(listnum, 2) + "_" + 
            format(recordingnum, 2);

        // Let eye-tracker open a data file. 
        eyetracker.open_data_file(
            edfname
            );
        eyetracker.print_to_data_file(expdb.experiment.id);
    }
}

// This block generates the images, instead of actually running the experiment.
Block task_generate
{
    string current_data_dir() {

        string dir = "data/visworldx/img/" + selected_group + '/';

        if( !file_exists(dir) ) {
            create_dir_tree(dir);
        }

        return dir;
    }

    Block practice
    {
        on_event:entry()
        {
            num_cycles = test_prac_items.size;
            // Use progress bar
            // test_page.setup(num_cycles);
            // Disable progressbar
            test_page.setup(-1);
        }

        on_event:exit()
        {
            test_page.cleanup();
        }

        Trial trial
        {
            TestItem current_item;

            on_event:entry()
            {
                current_item = test_prac_items[practice.cycle];
            }

            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.quick_show_and_save_picture(
                            this,
                            current_item,
                            reference_time,
                            practice.cycle,
                            current_data_dir()
                            );
                }
            }
        }
    }

    Block test
    {
        on_event:entry()
        {
            num_cycles = test_items[selected_group].size;
            // Use progress bar
            // test_page.setup(num_cycles);
            // Disable progressbar
            test_page.setup(-1);
        }

        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            TestItem current_item;

            on_event:entry()
            {
                current_item = test_items[selected_group][test.cycle];
            }


            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.quick_show_and_save_picture(
                            this,
                            current_item,
                            reference_time,
                            test.cycle,
                            current_data_dir()
                            );
                }
            }
        }
    }
}

void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}

void action_generate(Part caller)
{
    // Activate the generation of images.
    task_generate.enter(caller);
}
